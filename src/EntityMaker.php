<?php

namespace Zazalt\EntityMaker;

class EntityMaker extends \Zazalt\Databaser\Databaser
{
    private $System;
    private $exportTo;
    private $namespace;
    private $extends;
    private $constructInject;

    public function __construct()
    {
        $this->System = new \Zazalt\System\System();
    }

    /**
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->namespace = $namespace;
        return $this;
    }

    /**
     * @return $this
     */
    public function setExtends($extends)
    {
        $this->extends = $extends;
        return $this;
    }

    /**
     * @return $this
     */
    public function setConstructInject($parameters)
    {
        $this->constructInject = $parameters;
        return $this;
    }

    /**
     * @return $this
     */
    public function exportTo($exportTo)
    {
        $this->exportTo = $exportTo;
        return $this;
    }

    public function run()
    {
        $entities = parent::run();

        $this->System->recursiveCreateDirectory($this->exportTo . '/AutoGenerated/Model');
        $this->System->recursiveCreateDirectory($this->exportTo . '/AutoGenerated/Repository');

        foreach ($entities as $entity => $rows) {
            $this->createEntity([$entity => $rows]);
        }
    }

    /**
     * Will create the entity only once, if not exits
     */
    private function createEntity(array $entity)
    {
        $modelNameCamelCase         =   \Zazalt\Strink\Strink::turn(key($entity))->snakeCaseToCamelCase(true);
        $modelContent               =   file_get_contents(dirname(__FILE__).'/Templates/Entity.php');

        $modelContent = strtr($modelContent, [
            '___CLASS___'       =>  $modelNameCamelCase,
            '___NAMESPACE___'   =>  $this->namespace,
            '___TABLE___'       =>  key($entity),
            '___DATETIME___'    =>  date('Y-m-d H:i:s'),
            '##extends##'       =>  'extends \\'. $this->namespace .'\AutoGenerated\Model\\'. $modelNameCamelCase,
            '##construct##'     =>  "public function __construct()\n\t{\n\t\tparent::__construct();\n\t}"
        ]);

        if($this->constructInject) {
            $modelContent = str_replace('::__construct()', "::__construct({$this->constructInject})", $modelContent);
            $modelContent = str_replace('parent::', "global {$this->constructInject};\n\t\tparent::", $modelContent);
        }

        $modelPath = $this->exportTo ."/{$modelNameCamelCase}.php";
        if(!file_exists($modelPath)) {
            file_put_contents($this->exportTo ."/{$modelNameCamelCase}.php", $modelContent);
        }

        /* extends */ $this->createAutoGeneratedRepository($entity);
        /* extends */ $this->creatAutoGeneratedModel($entity);
    }

    /**
     * Will create (ALL THE TIME) the files inside of /AutoGenerated/Repository/ directory
     */
    private function createAutoGeneratedRepository(array $entity)
    {
        $modelNameCamelCase     =   \Zazalt\Strink\Strink::turn(key($entity))->snakeCaseToCamelCase(true);
        $fileContent            =   file_get_contents(dirname(__FILE__).'/Templates/AutoGenerated/Repository/Repository.php');
        $fileContent            = strtr($fileContent, [
            '___CLASS___'       =>  $modelNameCamelCase,
            '___NAMESPACE___'   =>  $this->namespace .'\AutoGenerated\Repository',
            '___TABLE___'       =>  key($entity),
            '___DATE___'        =>  date('Y-m-d H:i:s'),
            '##extends##'       =>  ($this->extends ? 'extends '. $this->extends : ''),
            '##construct##'     =>  ($this->extends ? "public function __construct()\n\t{\n\t\tparent::__construct();\n\t}" : '')
        ]);

        if($this->constructInject) {
            $fileContent = str_replace('__construct()', "__construct({$this->constructInject})", $fileContent);
        }

        file_put_contents($this->exportTo ."/AutoGenerated/Repository/{$modelNameCamelCase}.php", $fileContent);
    }

    /**
     * Will create (ALL THE TIME) the files inside of /AutoGenerated/Model/ directory
     */
    private function creatAutoGeneratedModel(array $entity)
    {
        $modelNameCamelCase     =   \Zazalt\Strink\Strink::turn(key($entity))->snakeCaseToCamelCase(true);
        $autoGeneratedModelContent  =   file_get_contents(dirname(__FILE__).'/Templates/AutoGenerated/Model/Model.php');

        $autoGeneratedModelContent = str_replace("##construct##", "protected \$modelName = '". key($entity) ."';\n\n\t##construct##", $autoGeneratedModelContent);

        $autoGeneratedModelContent = strtr($autoGeneratedModelContent, [
            '___CLASS___'       =>  $modelNameCamelCase,
            '___NAMESPACE___'   =>  $this->namespace .'\AutoGenerated\Model',
            '___TABLE___'       =>  key($entity),
            '___DATE___'        =>  date('Y-m-d H:i:s'),
            '##extends##'       =>  'extends \\'. $this->namespace .'\AutoGenerated\Repository\\'. $modelNameCamelCase,
            '##construct##'     =>  ($this->extends ? "public function __construct()\n\t{\n\t\tparent::__construct();\n\t}" : '')
        ]);

        $members = '';
        $methods = '';
        $index = 0;

        foreach($entity as $entityName => $rows) {

            foreach($rows as $rowName => $row) {
                $members .= ($index > 0 ? "\n" : null);
                $members .= "\n\t/**";
                $members .= "\n\t* @rowName\t\t". $rowName;
                //$members .= "\n\t* @nullable\t\t{$entity['is_nullable']}";
                $members .= "\n\t* @primaryKey\t". (boolval($row['primaryKey']) ? 'true' : 'false');
                $members .= "\n\t* @type\t\t\t{$row['type']}";
                $members .= "\n\t* @default\t\t{$row['default']}";
                $members .= "\n\t*/";
                $members .= "\n\t";
                $members .= 'private $'. \Zazalt\Strink\Strink::turn($rowName)->snakeCaseToCamelCase(false) .';';
                ++$index;
            }

            /*
            foreach($rows as $rowName => $row) {
                if($row['primaryKey']) {
                    $rows = array_merge([
                        'primaryKey' => array_merge(['primaryKey' => $rowName], $row)
                    ], $rows);
                }
            }
            */

            //print_r($rows);die;

            foreach($rows as $rowName => $row) {
                $rowNameUcfCamelCase    = \Zazalt\Strink\Strink::turn($rowName)->snakeCaseToCamelCase(true);
                $rowNameCamelCase       = \Zazalt\Strink\Strink::turn($rowName)->snakeCaseToCamelCase();

                $methods .= "\n\n\t/**\n\t * @return {$modelNameCamelCase}\n\t */";
                $methods .= "\n\tpublic function set". $rowNameUcfCamelCase ."(\${$rowNameCamelCase})\n\t{\n\t\t\$this->{$rowNameCamelCase} = \${$rowNameCamelCase};\n\t\treturn \$this;\n\t}";
                $methods .= "\n\n\tpublic function get". $rowNameUcfCamelCase ."()\n\t{\n\t\treturn \$this->{$rowNameCamelCase};\n\t}";
            }
        }

        $autoGeneratedModelContent = str_replace('##members##', $members, $autoGeneratedModelContent);
        $autoGeneratedModelContent = str_replace('##methods##', $methods, $autoGeneratedModelContent);

        file_put_contents($this->exportTo ."/AutoGenerated/Model/{$modelNameCamelCase}.php", $autoGeneratedModelContent);
    }
















    /**
     * Generate model file with only database raws, setters and getters
     */
    private function createModel($entity)
    {
        $autoGeneratedModelContent  =   file_get_contents(dirname(__FILE__).'/Templates/AutoGenerated/Model/Model.php');
        $modelContent               =   file_get_contents(dirname(__FILE__).'/Templates/Model.php');
        $modelNameCamelCase         =   \Zazalt\Strink\Strink::turn(key($entity))->snakeCaseToCamelCase(true);

        $autoGeneratedModelContent = str_replace("##construct##", "protected \$modelName = '". key($entity) ."';\n\n\t##construct##", $autoGeneratedModelContent);

        $autoGeneratedModelContent = strtr($autoGeneratedModelContent, [
            '___CLASS___'       =>  $modelNameCamelCase,
            '___NAMESPACE___'   =>  $this->namespace .'\AutoGenerated\Model',
            '___TABLE___'       =>  key($entity),
            '___DATE___'        =>  date('Y-m-d H:i:s'),
            '##extends##'       =>  'extends \\'. $this->namespace .'\AutoGenerated\Repository\\'. $modelNameCamelCase,
            '##construct##'     =>  ($this->extends ? "public function __construct()\n\t{\n\t\tparent::__construct();\n\t}" : '')
        ]);

        if($this->constructInject) {
            $autoGeneratedModelContent = str_replace('__construct()', "__construct({$this->constructInject})", $autoGeneratedModelContent);
        }

        $modelContent = strtr($modelContent, [
            '___CLASS___'       =>  $modelNameCamelCase,
            '___NAMESPACE___'   =>  $this->namespace,
            '___TABLE___'       =>  key($entity),
            '___DATE___'        =>  date('Y-m-d H:i:s'),
            '##extends##'       =>  'extends \\'. $this->namespace .'\AutoGenerated\Model\\'. $modelNameCamelCase,
            '##construct##'     =>  "public function __construct()\n\t{\n\t\tparent::__construct();\n\t}\n\n\t/* You can put your custom/logical code for this entity in this file. */\n\t/* This is the only file auto-generated only once (if not exists). */"
        ]);

        if($this->constructInject) {
            $modelContent = str_replace('::__construct()', "::__construct({$this->constructInject})", $modelContent);
            $modelContent = str_replace('parent::', "global {$this->constructInject};\n\t\tparent::", $modelContent);
        }

        $members = '';
        $methods = '';
        $index = 0;

        foreach($entity as $entityName => $rows) {

            foreach($rows as $rowName => $row) {
                $members .= ($index > 0 ? "\n" : null);
                $members .= "\n\t/**";
                $members .= "\n\t* @rowName\t\t". $rowName;
                //$members .= "\n\t* @nullable\t\t{$entity['is_nullable']}";
                $members .= "\n\t* @primaryKey\t". (boolval($row['primaryKey']) ? 'true' : 'false');
                $members .= "\n\t* @type\t\t\t{$row['type']}";
                $members .= "\n\t* @default\t\t{$row['default']}";
                $members .= "\n\t*/";
                $members .= "\n\t";
                $members .= 'private $'. \Zazalt\Strink\Strink::turn($rowName)->snakeCaseToCamelCase(false) .';';
                ++$index;
            }

            /*
            foreach($rows as $rowName => $row) {
                if($row['primaryKey']) {
                    $rows = array_merge([
                        'primaryKey' => array_merge(['primaryKey' => $rowName], $row)
                    ], $rows);
                }
            }
            */

            //print_r($rows);die;

            foreach($rows as $rowName => $row) {
                $rowNameUcfCamelCase    = \Zazalt\Strink\Strink::turn($rowName)->snakeCaseToCamelCase(true);
                $rowNameCamelCase       = \Zazalt\Strink\Strink::turn($rowName)->snakeCaseToCamelCase();

                $methods .= "\n\n\t/**\n\t * @return {$modelNameCamelCase}\n\t */";
                $methods .= "\n\tpublic function set". $rowNameUcfCamelCase ."(\${$rowNameCamelCase})\n\t{\n\t\t\$this->{$rowNameCamelCase} = \${$rowNameCamelCase};\n\t\treturn \$this;\n\t}";
                $methods .= "\n\n\tpublic function get". $rowNameUcfCamelCase ."()\n\t{\n\t\treturn \$this->{$rowNameCamelCase};\n\t}";
            }
        }

        $autoGeneratedModelContent = str_replace('##members##', $members, $autoGeneratedModelContent);
        $autoGeneratedModelContent = str_replace('##methods##', $methods, $autoGeneratedModelContent);

        file_put_contents($this->exportTo ."/AutoGenerated/Model/{$modelNameCamelCase}.php", $autoGeneratedModelContent);

        $modelPath = $this->exportTo ."/{$modelNameCamelCase}.php";
        if(!file_exists($modelPath)) {
            file_put_contents($this->exportTo ."/{$modelNameCamelCase}.php", $modelContent);
        }

        $this->createAutoGeneratedRepository(
            $entity,
            \Zazalt\Strink\Strink::turn(key($entity))->snakeCaseToCamelCase(true)
        );
    }
}